package views.screen;

import controller.report.ReportController;
import entity.events.Event;
import entity.reports.Report; // Corrected import path
import entity.users.VolunteerOrganization;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;

public class ProgressReportScreenHandler {

    @FXML private Label eventTitleLabel;
    @FXML private DatePicker reportDatePicker;
    @FXML private TextField progressField; 
    @FXML private TextArea notesTextArea;
    @FXML private CheckBox finalReportCheckBox;
    @FXML private Button saveReportButton;
    @FXML private Button cancelButton;
    @FXML private Label statusMessageLabel;

    private Stage stage;
    private VolunteerOrganization organization;
    private Event eventToReportOn;
    private ReportController reportController;

    public ProgressReportScreenHandler() {
        this.reportController = new ReportController();
    }

    public void setStage(Stage stage) {
        this.stage = stage;
    }

    public void setOrganization(VolunteerOrganization organization) {
        this.organization = organization;
    }

    public void setEventToReportOn(Event event) {
        this.eventToReportOn = event;
        if (event != null) {
            eventTitleLabel.setText("Report for: " + event.getTitle());
        }
        reportDatePicker.setValue(LocalDate.now()); 
    }

    @FXML
    private void handleSaveReport() {
        if (eventToReportOn == null) {
            statusMessageLabel.setText("Error: No event selected for reporting.");
            return;
        }

        LocalDate localDate = reportDatePicker.getValue();
        if (localDate == null) {
            statusMessageLabel.setText("Report date is required.");
            return;
        }
        Date reportDate = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());

        int progress = 0;
        try {
            progress = Integer.parseInt(progressField.getText());
            if (progress < 0 || progress > 100) {
                statusMessageLabel.setText("Progress must be a percentage between 0 and 100.");
                return;
            }
        } catch (NumberFormatException e) {
            statusMessageLabel.setText("Invalid progress value. Please enter a number.");
            return;
        }

        String notes = notesTextArea.getText();
        boolean isFinal = finalReportCheckBox.isSelected();

        Report report = new Report();
        // reportId is usually auto-generated by the database, so we don't set it here.
        report.setEventId(eventToReportOn.getEventId()); 
        report.setReportDate(reportDate);
        report.setProgress(progress);
        report.setNote(notes);
        
        if (reportController.saveProgressReport(report, isFinal)) {
            statusMessageLabel.setText("Report saved successfully!");
            navigateToEventList(); 
        } else {
            statusMessageLabel.setText("Failed to save report. Please try again.");
        }
    }

    @FXML
    private void handleCancel() {
        navigateToEventList();
    }
    
    private void navigateToEventList() {
         try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/fxml/OrganizationScreen/VolunteerOrgViewEventListScreen.fxml"));
            Parent root = loader.load();
            VolunteerOrgViewEventListScreenHandler controller = loader.getController();
            controller.setStage(stage);
            controller.setOrganization(organization);
            // controller.loadEventData(); // To refresh list if needed

            Scene scene = new Scene(root, 1024, 768);
            stage.setScene(scene);
            stage.setTitle("My Events List");
            stage.show();
        } catch (IOException e) {
            if(statusMessageLabel!=null) statusMessageLabel.setText("Error loading event list screen: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 